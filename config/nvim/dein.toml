##### Required ######
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_source = '''
  let g:quickrun_config = {
\   '_': {
\     'runner': 'vimproc',
\     'runner/vimproc/updatetime': 40,
\     'outputter': 'error',
\     'outputter/error/success': 'buffer',
\     'outputter/error/error': 'quickfix',
\     'outputter/buffer/close_on_empty': 1,
\     'outputter/buffer/split': ':botright 4sp',
\   }
\ }
'''
#####################

##### Color Scheme #####
[[plugins]]
repo = 'altercation/vim-colors-solarized'
hook_add = '''
  set background=dark
  let g:solarized_termtrans = 1
  let g:solarized_termcolors = 256
  augroup ColorScheme
    autocmd!
    au ColorScheme VimEnter * nested colorscheme solarized
  augroup END
'''
########################

##### EasyMotion #####
[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
  let g:EasyMotion_smartcase = 1
  let g:EasyMotion_do_mapping = 0
  nmap <Leader> <Plug>(easymotion-prefix)
  nmap <Leader>l <Plug>(easymotion-lineforward)
  nmap <Leader>j <Plug>(easymotion-j)
  nmap <Leader>k <Plug>(easymotion-k)
  nmap <Leader>h <Plug>(easymotion-linebackward)
  nmap <Leader>s <Plug>(easymotion-overwin-f2)
'''
######################

##### Auto Complete #####
[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
  let g:deoplete#enable_at_startup = 1
'''
#########################

##### Syntax Check #####
[[plugins]]
repo = 'neomake/neomake'
hook_add = '''
  autocmd! BufWritePost * Neomake
'''
########################

##### Status Line #####
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
\   'colorscheme': 'solarized',
\   'mode_map': {'c': 'NORMAL'},
\   'active': {
\     'left': [['mode', 'paste'], ['fugitive', 'filename']]
\   },
\   'component_function': {
\     'modified': 'LightLineModified',
\     'readonly': 'LightLineReadOnly',
\     'fugitive': 'LightLineFugitive',
\     'filename': 'LightLineFileName',
\     'fileformat': 'LightLineFileformat',
\     'filetype': 'LightLineFiletype',
\     'fileencoding': 'LightLineFileEncoding',
\     'mode': 'LightLineMode'
\   }
\ }
  function! LightLineModified()
    return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction

  function! LightLineReadOnly()
    return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
  endfunction

  function! LightLineFilename()
    return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
\     (&ft == 'vimfiler' ? vimfiler#get_status_string() :
\     &ft == 'unite' ? unite#get_status_string() :
\     &ft == 'vimshell' ? vimshell#get_status_string() :
\     '' != expand('%:t') ? expand('%:t') : '[No Name]') .
\     ('' != LightLineModified() ? ' ' . LightLineModified() : '')
  endfunction

  function! LightLineFugitive()
    if &ft !~? 'vimfiler\|gundo' && exists('fugitive#head')
      return fugitive#head()
    else
      return ''
    endif
  endfunction

  function! LightLineFileFormat()
    return winwidth(0) > 70 ? &fileformat : ''
  endfunction

  function! LightLineFiletype()
    return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
  endfunction

  function! LightLineFileencoding()
    return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
  endfunction

  function! LightLineMode()
    return winwidth(0) > 60 ? lightline#mode() : ''
  endfunction
'''
#######################

##### Git #####
[[plugins]]
repo = 'tpope/vim-fugitive'
###############
