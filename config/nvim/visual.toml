[[plugins]]
repo = 'lifepillar/vim-solarized8'
if = "has('nvim')"
depends = 'itchyny/lightline.vim'
hook_add = '''
set background=dark
augroup ColorScheme
  autocmd!
  au ColorScheme VimEnter * nested colorscheme solarized8_dark
augroup END
'''

[[plugins]]
repo = 'altercation/vim-colors-solarized'
if = "!has('nvim')"
hook_add = '''
set background=dark
let g:solarized_termtrans = 1
let g:solarized_termcolors = 256
augroup ColorScheme
  autocmd!
  au ColorScheme VimEnter * nested colorscheme solarized
augroup END
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
      \ 'colorscheme': 'solarized',
      \ 'mode_map': {'c': 'NORMAL'},
      \ 'active': {
      \   'left': [
      \     ['mode', 'paste'],
      \     ['filename', 'denite_source'],
      \     ['linter']
      \   ],
      \   'right': [
      \     ['lineinfo']
      \   ]
      \ },
      \ 'component_function': {
""\   'modified': 'LightLineModified',
""\   'readonly': 'LightLineReadOnly',
""\   'fugitive': 'LightLineFugitive',
""\   'filename': 'LightLineFileName',
""\   'fileformat': 'LightLineFileformat',
""\   'filetype': 'LightLineFiletype',
""\   'fileencoding': 'LightLineFileEncoding',
      \   'mode': 'LightLineMode',
      \   'linter': 'LightLineLinterStatus',
      \   'denite_source': 'LightLineDeniteSource'
      \   }
      \ }

""function! LightLineModified()
""  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
""endfunction
""
""function! LightLineReadOnly()
""  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
""endfunction
""
function! LightLineFilename()
  return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
        \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction
""
""function! LightLineFugitive()
""  if &ft !~? 'vimfiler\|gundo' && exists('fugitive#head')
""    return fugitive#head()
""  else
""    return ''
""  endif
""endfunction
""
""function! LightLineFileFormat()
""  return winwidth(0) > 70 ? &fileformat : ''
""endfunction
""
""function! LightLineFiletype()
""  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
""endfunction
""
""function! LightLineFileencoding()
""  return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
""endfunction
""
function! LightLineMode()
  if &ft == 'denite'
    let mode_str = substitute(denite#get_status_mode(), "-\\| ", "", "g")
    call lightline#link(tolower(mode_str[0]))
    return mode_str
  endif

  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! LightLineLinterStatus()
  let l:counts = ale#statusline#Count(bufnr(''))

  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors

  return l:counts.total == 0 ? '' : printf('⨉ %d, ⚠ %d', all_non_errors, all_errors)
endfunction

function! LightLineDeniteSource()
  return &ft == 'denite' ? denite#get_status_sources() : ''
endfunction

function! LightLineLineInfo()
endfunction
'''
