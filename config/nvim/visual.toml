[[plugins]]
repo = 'lifepillar/vim-solarized8'
if = "has('nvim')"
depends = 'itchyny/lightline.vim'
hook_add = '''
set background=dark
augroup ColorScheme
  autocmd!
  au ColorScheme VimEnter * nested colorscheme solarized8_dark
augroup END
'''

[[plugins]]
repo = 'altercation/vim-colors-solarized'
if = "!has('nvim')"
hook_add = '''
set background=dark
let g:solarized_termtrans = 1
let g:solarized_termcolors = 256
augroup ColorScheme
  autocmd!
  au ColorScheme VimEnter * nested colorscheme solarized
augroup END
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
\ 'colorscheme': 'solarized',
""\ 'mode_map': {'c': 'NORMAL'},
\ 'active': {
\   'left': [['mode', 'paste', 'ale'], []]
\ },
\ 'component_function': {
""\   'modified': 'LightLineModified',
""\   'readonly': 'LightLineReadOnly',
""\   'fugitive': 'LightLineFugitive',
""\   'filename': 'LightLineFileName',
""\   'fileformat': 'LightLineFileformat',
""\   'filetype': 'LightLineFiletype',
""\   'fileencoding': 'LightLineFileEncoding',
""\   'mode': 'LightLineMode',
\   'ale': 'LinterStatus'
\ }
\}
""function! LightLineModified()
""  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
""endfunction
""
""function! LightLineReadOnly()
""  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
""endfunction
""
""function! LightLineFilename()
""  return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
""        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
""        \ &ft == 'unite' ? unite#get_status_string() :
""        \ &ft == 'vimshell' ? vimshell#get_status_string() :
""        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
""        \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
""endfunction
""
""function! LightLineFugitive()
""  if &ft !~? 'vimfiler\|gundo' && exists('fugitive#head')
""    return fugitive#head()
""  else
""    return ''
""  endif
""endfunction
""
""function! LightLineFileFormat()
""  return winwidth(0) > 70 ? &fileformat : ''
""endfunction
""
""function! LightLineFiletype()
""  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
""endfunction
""
""function! LightLineFileencoding()
""  return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
""endfunction
""
""function! LightLineMode()
""  return winwidth(0) > 60 ? lightline#mode() : ''
""endfunction
""
function! LinterStatus() abort
  let l:counts = ale#statusline#Count(bufnr(''))

  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors

  return l:counts.total == 0 ? 'OK' : printf(
  \   '%dW %dE',
  \   all_non_errors,
  \   all_errors
  \)
endfunction
'''
