##############################
###     Plugin Manager    ####
##############################
[[plugins]]
repo = 'Shougo/dein.vim'

##############################
###      Color Scheme      ###
##############################
[[plugins]]
repo = 'altercation/vim-colors-solarized'
hook_add = '''
  set background=dark
  let g:solarized_termtrans = 1
  let g:solarized_termcolors = 256
  augroup ColorScheme
    autocmd!
    au ColorScheme VimEnter * nested colorscheme solarized
  augroup END
'''

##############################
###        EasyMotion      ###
##############################
[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
  let g:EasyMotion_smartcase = 1
  let g:EasyMotion_do_mapping = 0
  nmap <Space>l <Plug>(easymotion-lineforward)
  nmap sj <Plug>(easymotion-j)
  nmap sk <Plug>(easymotion-k)
  nmap sh <Plug>(easymotion-linebackward)
  nmap ss <Plug>(easymotion-overwin-f2)
'''

##############################
###      Syntax Check      ###
##############################
[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
'''

##############################
###       Status Line      ###
##############################
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
\   'colorscheme': 'solarized',
\   'mode_map': {'c': 'NORMAL'},
\   'active': {
\     'left': [['mode', 'paste', 'ale'], ['fugitive', 'filename']]
\   },
\   'component_function': {
\     'modified': 'LightLineModified',
\     'readonly': 'LightLineReadOnly',
\     'fugitive': 'LightLineFugitive',
\     'filename': 'LightLineFileName',
\     'fileformat': 'LightLineFileformat',
\     'filetype': 'LightLineFiletype',
\     'fileencoding': 'LightLineFileEncoding',
\     'mode': 'LightLineMode',
\     'ale': 'ALEStatus'
\   }
\ }
  function! LightLineModified()
    return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction

  function! LightLineReadOnly()
    return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
  endfunction

  function! LightLineFilename()
    return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
\     (&ft == 'vimfiler' ? vimfiler#get_status_string() :
\     &ft == 'unite' ? unite#get_status_string() :
\     &ft == 'vimshell' ? vimshell#get_status_string() :
\     '' != expand('%:t') ? expand('%:t') : '[No Name]') .
\     ('' != LightLineModified() ? ' ' . LightLineModified() : '')
  endfunction

  function! LightLineFugitive()
    if &ft !~? 'vimfiler\|gundo' && exists('fugitive#head')
      return fugitive#head()
    else
      return ''
    endif
  endfunction

  function! LightLineFileFormat()
    return winwidth(0) > 70 ? &fileformat : ''
  endfunction

  function! LightLineFiletype()
    return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
  endfunction

  function! LightLineFileencoding()
    return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
  endfunction

  function! LightLineMode()
    return winwidth(0) > 60 ? lightline#mode() : ''
  endfunction

  function! ALEstatus()
    return ALEGetStatusLine()
  endfunction
'''

##############################
###           Ctags        ###
##############################
[[plugins]]
repo = 'soramugi/auto-ctags.vim'
hook_add = '''
let g:auto_ctags = 1
let g:auto_ctags_directory_list = ['.git', '.svn']
let g:auto_ctags_filetype_mode = 1
'''

##############################
###      Fuzzy search      ###
##############################
[[plugins]]
repo = 'haya14busa/incsearch.vim'
hook_add = '''
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
'''

##############################
###    Context FileType    ###
##############################
[[plugins]]
repo = 'Shougo/context_filetype.vim' 

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = 'Shougo/context_filetype.vim'
